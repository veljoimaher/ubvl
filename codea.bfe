%{
/* vim: filetype=c
*/
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#define BURM
#include "tree.h"


%}

%start stmt
%term NOT=1 HEAD=2 TAIL=3 ISNUM=4 ISLIST=5 ISFUN=6 ADD=7 SUB=8 MUL=9 AND=10 LESS=11 EQ=12 IDENT=13 NUM=14 ASGN=15 LASGN=16 THEN=17 ELSE=18 IF=19 DUMMY=20 DOT=21


%%

stmt: ASGN (reg, lambda)                # 4 # printf("%s:\n", LEFT_CHILD(bnode)->name);

lambda: LASGN (reg, expr)                 # 1 # printf("func param: %s\n", bnode->op);
lambda: LASGN (reg, reg)		# 2 # printf ("lambda reg reg\n");

expr: ops
expr: term 

ops: NOT(ops)
ops: HEAD(ops)
ops: TAIL(ops)
ops: ISNUM(ops)
ops: ISLIST(ops)
ops: ISFUN(ops)
ops: term

term: reg
term: rc
term: ADD (reg, reg)
term: ADD (reg, rc)
term: ADD (rc, reg)
term: ADD (term, term)

term: SUB (reg, reg)
term: SUB (reg, rc)
term: SUB (rc, reg)
term: SUB (term, term)

term: MUL (reg, reg)
term: MUL (reg, rc)
term: MUL (rc, reg)
term: MUL (term, term)

term: AND (reg, reg)
term: AND (reg, rc)
term: AND (rc, reg)
term: AND (term, term)

term: DOT (reg, reg)
term: DOT (reg, rc)
term: DOT (rc, reg)
term: DOT (term, term)

term: LESS (reg, reg)
term: LESS (reg, rc)
term: LESS (rc, reg)
term: LESS (term, term)

term: EQ (reg, reg)
term: EQ (reg, rc)
term: EQ (rc, reg)
term: EQ (term, term)

rc: num                                 # 0 #

reg: IDENT                              # 0 # printf("IDENT\n");
num: NUM                                # 0 # printf("NUM\n");

%%
