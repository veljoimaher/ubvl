%{
/* vim: filetype=c
*/
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#define BURM
#include "tree.h"
#include "assembler.h"
#include "reg.h"


%}

%start stmt
%term NOT=1 HEAD=2 TAIL=3 ISNUM=4 ISLIST=5 ISFUN=6 ADD=7 SUB=8 MUL=9 AND=10 LESS=11 EQ=12 IDENT=13 NUM=14 ASGN=15 LASGN=16 THEN=17 ELSE=18 IF=19 LET=20 DOT=21


%%

stmt: ASGN (reg, lambda)                # 4 # assembler_asgn (bnode->left, bnode->right); 

lambda: LASGN (reg, expr)               # 1 # assembler_lasgn_reg_expr (bnode->left, bnode->right);
lambda: LASGN (reg, reg)		# 2 # assembler_lasgn_reg_reg (bnode->left, bnode->right); 

expr: ops
expr: term 

ops: NOT(ops)
ops: HEAD(ops)
ops: TAIL(ops)
ops: ISNUM(ops)
ops: ISLIST(ops)
ops: ISFUN(ops)
ops: term

term: reg
term: rc
term: ADD (reg, reg)			# 2 # assembler_add_id_id (bnode->left, bnode->right); 
term: ADD (reg, rc)			# 1 # assembler_add_id_num (bnode->left, bnode->right); 
term: ADD (rc, reg)			# 1 # assembler_add_num_id (bnode->left, bnode->right); 
term: ADD (term, term)			# 3 # assembler_add (bnode->left, bnode->right); 

term: SUB (reg, reg)			# 2 # assembler_sub_id_id (bnode->left, bnode->right); 
term: SUB (reg, rc)			# 1 # assembler_sub_id_num (bnode->left, bnode->right); 
term: SUB (rc, reg)			# 1 # assembler_sub_num_id (bnode->left, bnode->right); 
term: SUB (term, term)			# 3 # assembler_sub (bnode->left, bnode->right); 

term: MUL (reg, reg)			# 2 # assembler_mul_id_id (bnode->left, bnode->right); 
term: MUL (reg, rc)			# 1 # assembler_mul_id_num (bnode->left, bnode->right); 
term: MUL (rc, reg)			# 1 # assembler_mul_num_id (bnode->left, bnode->right); 
term: MUL (term, term)			# 3 # assembler_mul (bnode->left, bnode->right); 

term: AND (reg, reg)			# 2 # assembler_and_id_id (bnode->left, bnode->right); 
term: AND (reg, rc)			# 1 # assembler_and_id_num (bnode->left, bnode->right); 
term: AND (rc, reg)			# 1 # assembler_and_num_id (bnode->left, bnode->right); 
term: AND (term, term)			# 3 # assembler_and (bnode->left, bnode->right); 

term: DOT (reg, reg)			# 2 # assembler_dot_id_id (bnode->left, bnode->right); 
term: DOT (reg, rc)			# 1 # assembler_dot_id_num (bnode->left, bnode->right); 
term: DOT (rc, reg)			# 1 # assembler_dot_num_id (bnode->left, bnode->right); 
term: DOT (term, term)			# 3 # assembler_dot (bnode->left, bnode->right); 

term: LESS (reg, reg)			# 2 # assembler_less_id_id (bnode->left, bnode->right); 
term: LESS (reg, rc)			# 1 # assembler_less_id_num (bnode->left, bnode->right); 
term: LESS (rc, reg)			# 1 # assembler_less_num_id (bnode->left, bnode->right); 
term: LESS (term, term)			# 3 # assembler_less (bnode->left, bnode->right);

term: EQ (reg, reg)			# 2 # assembler_eq_id_id (bnode->left, bnode->right); 
term: EQ (reg, rc)			# 1 # assembler_eq_id_num (bnode->left, bnode->right); 
term: EQ (rc, reg)			# 1 # assembler_eq_num_id (bnode->left, bnode->right); 
term: EQ (term, term)			# 3 # assembler_eq (bnode->left, bnode->right); 

rc: num                                 # 0 #

reg: IDENT                              # 0 # printf("IDENT: %s\n", bnode->name);
num: NUM                                # 0 # bnode->reg = newreg (); printf("\tmovq $%i, %%%s\n", bnode->val, bnode->reg);

%%
